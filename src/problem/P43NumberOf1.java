package problem;

import java.util.ArrayList;

/**
 * Title: 43. 整数中1出现的次数（从1到n整数中1出现的次数）
 * Desc: 求出1~N的十进制整数中1出现的次数。
 * 例如：1 ~ 13中包含1的数字有1、10、11、12、13，1出现了共出现6次（11出现了两次）
 *
 * Created by Myth on 6/20/2019
 */

public class P43NumberOf1 {
    // 根据数字找规律
    //设 N = abcde,其中 abcde 分别为十进制中各位上的数字。
    //如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
    //① 如果百位上数字为 0，百位上可能出现1的次数由更高位决定。
    // 比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。
    // 可以看出是由更高位数字（12）决定(最高位是 0-11)，并且等于更高位数字（12）乘以 当前位数（100）。a/10 * 100
    //② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。
    // 比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。
    // 和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，
    // 这时候百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。（a%10*100）+(b+1)
    //③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，
    // 比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，
    // 并且等于更高位数字+1（12+1）乘以当前位数（100）。(a%10+1)*100
    // 难点：如何循环？如何分割成两部分？？？ 取整、取余操作
    public int solution(int n) {
        int count = 0; //1的个数
        int i = 1; //当前位
        int current = 0,after = 0,before = 0;
        while((n/i)!= 0){
            current = (n / i) % 10; //当前位数字
            before = n / (i * 10);  //高位数字
            after = n - ( n / i ) * i; //低位数字
            System.out.println(current + ", " + before + ", " + after);
            //如果为0,出现1的次数由高位决定,等于高位数字 * 当前位数
            if (current == 0)
                count += before*i;
                //如果为1,出现1的次数由高位和低位决定,高位*当前位+低位+1
            else if(current == 1)
                count += before * i + after + 1;
                //如果大于1,出现1的次数由高位决定,//（高位数字+1）* 当前位数
            else{
                count += (before + 1) * i;
            }
            //前移一位
            i = i * 10;
            break;
        }
        return count;
    }
    // TODO: 拓展成 K（0 - 0） 的数目
    // 以下是网上的代码
    int count(int n, int x) {
        int cnt = 0;
        int i = 1;
        int k = n / i;
        while (k != 0) {
            // 高位的数字。
            int high = k / 10;
            if (x == 0) {
                if (high != 0) {
                    high--;
                } else {
                    break;
                }
            }
            cnt += high * i;
            // 当前位的数字。
            int cur = k % 10;
            if (cur > x) {
                cnt += i;
            } else if (cur == x) {
                // n - k * i 为低位的数字。
                cnt += n - k * i + 1;
            }
        }
        i *= 10;
        k = n / i;
        return cnt;
    }

    // Test case : 1~ 13 = 6   1 ~ 55 = 16
    public static void main(String[] args) {
        P43NumberOf1 p43 = new P43NumberOf1();
        System.out.println(p43.solution(12345));
    }

}
